Write your report here

In order to code this project, I first looked through each cpp file and figured out what each one was meant to do. I first completed the constructor implementation for each of the files to initialize each object. Each class had arguments, so to initialize the constructors, I would do this->(argument) = (argument). Then, I completed the cart.cpp functions, since I felt like I could complete these with less trouble than the other functions. For example, creating the add_item function and clear function only took one line to complete. Then, list_items and cart checkout included more code where I had to find the id of the products in the cart from the item list and get the products from the catalog to check if it was in the item list. If the product was in the list, then I would add the product to the return list for list_item and would get the product's cost and add it to the total cost in the cart checkout function. With this, the cart.cpp functions were completed.

Afterwards, I completed the search query function. I created a lowercase function because the user input could be in lowercase and the catalog could be in uppercase. If the strings had different cases, the computer would see them as two different things, so making them all lowercase would solve this issue. Then, I converted the max_price and min_price to cents in order to make the price and product price the same unit. I also added some code that would run if there was nothing in the min_price or max_price values when calling the function. After, I ran a for loop that went through every product in the catalog, found each name and compared the price to the minimum and maximum. If they met the conditions, I would push this into the array and return it at the end. This completed the query function.

Finally, I coded the router function, which would read the user input and call the respective function. I added a string variable, response, which would be the words returned at the end and output to the terminal. Then, I read through each possible user input and called the functions. I would also add a few lines of code to add to the response string and return back the values that the user required. For example, the checkout function required me to change the total_cents to dollars and cents and cut it down to two decimal places. Now, when a user input calls a function, it would output a response that caters to their wants.
